@page "/baza"

@inject AndroidMujezin.Servisi.ConfigServis _configServis
@inject AndroidMujezin.Servisi.VaktijaApiServis _vaktijaApi
@inject AndroidMujezin.Servisi.BazaServis _bazaServis



<h3>Konfiguracije baze podataka</h3>

 @if(ErrorMsgMjesta != null)
{
        <span class="alert-warning">@ErrorMsgMjesta</span>
}
else 
{
<div class="container">
   <div class="form row g-3">
            <div class="row g-3">
        <div class="col-12">
            <div class="input-group">
                <label class="input-group-text" for="NotifikujMinutaPrije">Mjesto:</label>
                <select  disabled="@DisableForm" id="mestoSelect" @bind="OdabranoMjesto" name="mestoSelect" class="form-select" aria-label="Odaberite mijesto">
                    @foreach (var mjesto in mjesta.Select(x => x))
                        {
                           <option value="@mjesto">@mjesto</option>
                        }
                </select>
            </div>
        </div>
    </div>
  
    <div class="row  g-2">
    <div class="col-12">
    <div class="input-group">
      <div class="input-group-text">Preuzmi bazu za slijdeći broj mjeseci: </div>
                        <input type="number" class="form-control" id="MjeseciUnaprijed" disabled="@DisableForm" @bind="MjeseciUnaprijed" min="1" max="48" placeholder="Mjeseci">
    </div>
  </div>
</div>
        </div>
<div class="row g-3">
        
<div class="col-6">
                <button class="btn btn-primary w-60" type="button" disabled="@DisableForm" @onclick="PovuciBazu">Povuci bazu</button>
</div>
<div class="col-6">
            @if (DisableForm)
            {
                    <button class="btn btn-secondary w-60" type="button" @onclick="PrekiniBazu">Prekini operaciju</button>
            }
            </div>
            </div>
    
    
    </div>
    @foreach (var informacija in informacije)
    {
        if (informacija.Valid)
        {
            <div class="alert alert-info" role="alert">
                @informacija.Msg
            </div>
        }
        else

        {
            <div class="alert alert-danger" role="alert">
               @informacija.Msg
            </div>
        }
    }
}


@code {
    private Modeli.MjestoModel _configModel { get; set; }

    private int MjeseciUnaprijed { get; set; } = 12;

    private string OdabranoMjesto { get; set; }

    private List<string> mjesta { get; set; } = new List<string>();

    private string ErrorMsgMjesta { get; set; } = "Učitavam bazu podataka";




    private CancellationTokenSource cancellationToken { get; set; }


    public string MsgBazaOk { get; set; }

    private bool DisableForm { get; set; }

    private List<AndroidMujezin.Modeli.PocoMsg> informacije { get; set; } = new List<Modeli.PocoMsg>();

    protected override void OnInitialized()
    {

        //porukaOBazi = _bazaServis.CheckBazu(DateTime.Now.Year);
    }
    protected override async Task OnInitializedAsync()
    {
        _configModel = _configServis.GetMjestoModel();
        OdabranoMjesto = _configModel.MjestoNaziv;
        try
        {
            mjesta = await _vaktijaApi.Mjesta();
            ErrorMsgMjesta = null;
        }
        catch(Exception ex)
        {
            this.DisableForm = true;
            this.ErrorMsgMjesta = $"Nisam dobio dostupna mjesta sa vaktija.ba servisa sa greškom: {ex.Message}";
        }
    }

    private async void PovuciBazu()
    {
        cancellationToken = new CancellationTokenSource();
        await PovuciBazuEngin(cancellationToken.Token);
    }
    private void PrekiniBazu()
    {
        //informacije.Add(new Modeli.PocoMsg() { Msg = "Korisnik prekinuo opreaciju", Valid = false });
        cancellationToken.Cancel();

    }

    private async Task PovuciBazuEngin(CancellationToken ct)
    {
        informacije.Clear();
        try
        {
            int mjestoIx = this.mjesta.IndexOf(OdabranoMjesto);

            this._configModel.MjestoIx = mjestoIx;
            this._configModel.MjestoNaziv = OdabranoMjesto;
            _configServis.SetMjestoModel(_configModel);
            

            if (string.IsNullOrEmpty(OdabranoMjesto))
            {
                informacije.Add(new Modeli.PocoMsg() { Valid = false, Msg = "Odaberite mjesto za koje vam treba baza" });
                StateHasChanged();
                return;
            }
            if (MjeseciUnaprijed < 0 || MjeseciUnaprijed > 48)
            {
                informacije.Add(new Modeli.PocoMsg() { Valid = false, Msg = "Broj mjeseci za preuzimanje baze može biti od 0 do 48 " });
                StateHasChanged();
                return;
            }

            informacije.Add(new Modeli.PocoMsg() { Valid = true, Msg = $"Preuzimam za {OdabranoMjesto} mejseci {MjeseciUnaprijed}" });
            DisableForm = true;

            StateHasChanged();
            await Task.Delay(TimeSpan.FromSeconds(2), ct);

            for (int i = 0; i < MjeseciUnaprijed; i++)
            {
                DateTime datum = DateTime.Now.AddMonths(i);
                informacije.Add(new Modeli.PocoMsg() { Valid = true, Msg = $"Preuzimam {datum.Year}-{datum.Month}" });
                StateHasChanged();
                var mjesec = await _vaktijaApi.PovuciVaktijuZaMjesec(mjestoIx, datum.Year, datum.Month, ct);
                _bazaServis.SpasiBazuMjesec(mjesec,ct);
                informacije.Add(new Modeli.PocoMsg() { Valid = true, Msg = $"Preuzeo {datum.Year}-{datum.Month}" });
                StateHasChanged();
            }
            
            informacije.Add(new Modeli.PocoMsg() { Valid = true, Msg = "Zavšili smo sa punjenjm " });

        }
        catch (OperationCanceledException ex)
        {
            informacije.Add(new Modeli.PocoMsg() { Valid = false, Msg = $"Preuzimanje baze prekinuo korisnik " });

        }

        catch(Exception ex)
        {
            informacije.Add(new Modeli.PocoMsg() { Valid = false, Msg = $"Greška kod preuzimanja baze ex:{ex.Message} " });

        }
        this.DisableForm = false;
        StateHasChanged();

    }
}
